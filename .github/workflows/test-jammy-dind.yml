name: 🧪 Test Ubuntu Jammy (22.04 LTS) runner

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
    paths:
      - "images/rootless-ubuntu-jammy.Dockerfile"
      - "images/**.sh"
      - "images/software/*"
      - ".github/workflows/test-jammy-dind.yml"

jobs:
  build:
    name: Build test image
    runs-on: ubuntu-latest # use the GitHub-hosted runner to build the image

    steps:
      - name: Set release id
        run: echo "SHA_SHORT=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Set up build summary
        run: |
          echo '### Build summary 🚀' >> $GITHUB_STEP_SUMMARY
          echo ' ' >> $GITHUB_STEP_SUMMARY
          echo '- Changes that produced this build [here](${{ github.server_url }}/${{ github.repository }}/commit/${{ env.SHA_SHORT }}) ' >> $GITHUB_STEP_SUMMARY
          echo '- Full code at this point in time [here](${{ github.server_url }}/${{ github.repository }}/tree/${{ env.SHA_SHORT }})' >> $GITHUB_STEP_SUMMARY
          echo ' ' >> $GITHUB_STEP_SUMMARY

      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Login to GHCR
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          file: "images/rootless-ubuntu-jammy.Dockerfile"
          push: true
          tags: ghcr.io/some-natalie/kubernoodles/rootless-ubuntu-jammy:test

  deploy:
    name: Deploy test image to `test-runners` namespace
    runs-on: ubuntu-latest # use the GitHub-hosted runner to deploy to test
    needs: [build]
    environment: test

    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      # set up minikube
      # - name: Set up minikube on the runner
      #   uses: medyagh/setup-minikube@5162ff23a2613f64e1f7298e5bb47514db073347 # latest
      # set up k3s
      - name: Install k3s
        shell: bash
        run: |
          curl -sfL https://get.k3s.io | sh -
          export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
          sudo chmod 644 $KUBECONFIG
          sleep 30
          kubectl get nodes

      # set up cluster configs
      # local storage and the runner role for the k8s mode runner hooks
      - name: Set up local storage
        shell: bash
        run: |
          kubectl create namespace "test-runners"
          kubectl create namespace "ghec-runners"
          kubectl apply -f ./cluster-configs/k8s-mode-storage.yml
          kubectl apply -f ./cluster-configs/runner-role.yml
        env:
          KUBECONFIG: /etc/rancher/k3s/k3s.yaml

      - name: Install Helm
        uses: azure/setup-helm@1a275c3b69536ee54be43f2070a358922e12c8d4 # v4.3.1

      - name: Deploy ARC
        shell: bash
        run: |
          helm install arc \
            --namespace "arc-systems" \
            --create-namespace \
            oci://ghcr.io/actions/actions-runner-controller-charts/gha-runner-scale-set-controller \
            --set image.tag=0.13.0
        env:
          KUBECONFIG: /etc/rancher/k3s/k3s.yaml

      - name: Create private key file
        run: |
          echo '${{ secrets.ARC_APP_PRIVATE_KEY }}' > private-key.pem

      - name: Update deployment (using latest chart of actions-runner-controller-charts/auto-scaling-runner-set)
        run: |
          helm install test-jammy-dind  \
            --namespace "test-runners" \
            --set-string githubConfigSecret.github_app_id="${{ vars.ARC_APP_ID }}" \
            --set-string githubConfigSecret.github_app_installation_id="${{ vars.ARC_INSTALL_ID }}" \
            --set-file githubConfigSecret.github_app_private_key=private-key.pem \
            -f deployments/helm-jammy-dind-test.yml \
            oci://ghcr.io/actions/actions-runner-controller-charts/gha-runner-scale-set \
            --version 0.13.0
        env:
          KUBECONFIG: /etc/rancher/k3s/k3s.yaml

      - name: Wait a minute and print debug info
        shell: bash
        run: |
          sleep 60
          kubectl get pods -n "test-runners"
          kubectl describe pods -n "test-runners" -v=9
        env:
          KUBECONFIG: /etc/rancher/k3s/k3s.yaml

      - name: Sleep for 5 minutes to run tests on the runners
        shell: bash
        run: sleep 300

      - name: Remove the runner deployment
        shell: bash
        run: |
          helm uninstall test-jammy-dind --namespace "test-runners"
        env:
          KUBECONFIG: /etc/rancher/k3s/k3s.yaml

      - name: Output removal
        shell: bash
        run: |
          echo ' ' >> $GITHUB_STEP_SUMMARY
          echo '🧹 Test deployment removed' >> $GITHUB_STEP_SUMMARY

  test:
    name: Run tests!
    runs-on: [test-jammy-dind]
    needs: [build]
    timeout-minutes: 5

    steps:
      - name: Setup test summary
        run: |
          echo '### Test summary 🧪' >> $GITHUB_STEP_SUMMARY
          echo ' ' >> $GITHUB_STEP_SUMMARY
          echo '- ✅ runner builds and deploys' >> $GITHUB_STEP_SUMMARY

      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Print debug info
        uses: ./tests/debug

      - name: Sudo fails
        uses: ./tests/sudo-fails

      - name: Docker tests
        uses: ./tests/docker

      - name: Container Action test
        id: container
        continue-on-error: true
        uses: ./tests/container

      - name: Log container success (if applicable)
        if: steps.container.outcome == 'success'
        run: |
          echo '- ✅ container action succeeded' >> $GITHUB_STEP_SUMMARY

      - name: Log container failure (if applicable)
        if: steps.container.outcome == 'failure'
        run: |
          echo '- ❌ container action failed' >> $GITHUB_STEP_SUMMARY
